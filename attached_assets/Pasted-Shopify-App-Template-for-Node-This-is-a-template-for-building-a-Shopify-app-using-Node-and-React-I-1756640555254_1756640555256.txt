Shopify App Template for Node
This is a template for building a Shopify app using Node and React. It contains the basics for building a Shopify app.

Rather than cloning this repo, you can use your preferred package manager and the Shopify CLI with these steps.

Benefits
Shopify apps are built on a variety of Shopify tools to create a great merchant experience. The create an app tutorial in our developer documentation will guide you through creating a Shopify app using this template.

The Node app template comes with the following out-of-the-box functionality:

OAuth: Installing the app and granting permissions
GraphQL Admin API: Querying or mutating Shopify admin data
REST Admin API: Resource classes to interact with the API
Shopify-specific tooling:
AppBridge
Polaris
Webhooks
Tech Stack
This template combines a number of third party open-source tools:

Express builds the backend.
Vite builds the React frontend.
React Router is used for routing. We wrap this with file-based routing.
React Query queries the Admin API.
i18next and related libraries are used to internationalize the frontend.
react-i18next is used for React-specific i18n functionality.
i18next-resources-to-backend is used to dynamically load app translations.
@formatjs/intl-localematcher is used to match the user locale with supported app locales.
@formatjs/intl-locale is used as a polyfill for Intl.Locale if necessary.
@formatjs/intl-pluralrules is used as a polyfill for Intl.PluralRules if necessary.
The following Shopify tools complement these third-party tools to ease app development:

Shopify API library adds OAuth to the Express backend. This lets users install the app and grant scope permissions.
App Bridge React adds authentication to API requests in the frontend and renders components outside of the App’s iFrame.
Polaris React is a powerful design system and component library that helps developers build high quality, consistent experiences for Shopify merchants.
File-based routing makes creating new pages easier.
@shopify/i18next-shopify is a plugin for i18next that allows translation files to follow the same JSON schema used by Shopify app extensions and themes.
Getting started
Requirements
You must download and install Node.js if you don't already have it.
You must create a Shopify partner account if you don’t have one.
You must create a store for testing if you don't have one, either a development store or a Shopify Plus sandbox store.
Installing the template
This template can be installed using your preferred package manager:

Using yarn:

yarn create @shopify/app --template=node
Using npm:

npm init @shopify/app@latest -- --template=node
Using pnpm:

pnpm create @shopify/app@latest --template=node
This will clone the template and install the required dependencies.

Local Development
The Shopify CLI connects to an app in your Partners dashboard. It provides environment variables, runs commands in parallel, and updates application URLs for easier development.

You can develop locally using your preferred package manager. Run one of the following commands from the root of your app.

Using yarn:

yarn dev
Using npm:

npm run dev
Using pnpm:

pnpm run dev
Open the URL generated in your console. Once you grant permission to the app, you can start development.

Deployment
Application Storage
This template uses SQLite to store session data. The database is a file called database.sqlite which is automatically created in the root. This use of SQLite works in production if your app runs as a single instance.

The database that works best for you depends on the data your app needs and how it is queried. You can run your database of choice on a server yourself or host it with a SaaS company. Here’s a short list of databases providers that provide a free tier to get started:

Database	Type	Hosters
MySQL	SQL	Digital Ocean, Planet Scale, Amazon Aurora, Google Cloud SQL
PostgreSQL	SQL	Digital Ocean, Amazon Aurora, Google Cloud SQL
Redis	Key-value	Digital Ocean, Amazon MemoryDB
MongoDB	NoSQL / Document	Digital Ocean, MongoDB Atlas
To use one of these, you need to change your session storage configuration. To help, here’s a list of SessionStorage adapter packages.

Build
The frontend is a single page app. It requires the SHOPIFY_API_KEY, which you can find on the page for your app in your partners dashboard. Paste your app’s key in the command for the package manager of your choice:

Using yarn:

cd web/frontend/ && SHOPIFY_API_KEY=REPLACE_ME yarn build
Using npm:

cd web/frontend/ && SHOPIFY_API_KEY=REPLACE_ME npm run build
Using pnpm:

cd web/frontend/ && SHOPIFY_API_KEY=REPLACE_ME pnpm run build
You do not need to build the backend.

Hosting
When you're ready to set up your app in production, you can follow our deployment documentation to host your app on a cloud provider like Heroku or Fly.io.

When you reach the step for setting up environment variables, you also need to set the variable NODE_ENV=production.

Known issues
Hot module replacement and Firefox
When running the app with the CLI in development mode on Firefox, you might see your app constantly reloading when you access it. That happened in previous versions of the CLI, because of the way HMR websocket requests work.

We fixed this issue with v3.4.0 of the CLI, so after updating it, you can make the following changes to your app's web/frontend/vite.config.js file:

Change the definition hmrConfig object to be:

const host = process.env.HOST
  ? process.env.HOST.replace(/https?:\/\//, "")
  : "localhost";

let hmrConfig;
if (host === "localhost") {
  hmrConfig = {
    protocol: "ws",
    host: "localhost",
    port: 64999,
    clientPort: 64999,
  };
} else {
  hmrConfig = {
    protocol: "wss",
    host: host,
    port: process.env.FRONTEND_PORT,
    clientPort: 443,
  };
}
Change the server.host setting in the configs to "localhost":

server: {
  host: "localhost",
  ...
I can't get past the ngrok "Visit site" page
When you’re previewing your app or extension, you might see an ngrok interstitial page with a warning:

You are about to visit <id>.ngrok.io: Visit Site
If you click the Visit Site button, but continue to see this page, then you should run dev using an alternate tunnel URL that you run using tunneling software. We've validated that Cloudflare Tunnel works with this template.

To do that, you can install the cloudflared CLI tool, and run:

# Note that you can also use a different port
cloudflared tunnel --url http://localhost:3000
Out of the logs produced by cloudflare you will notice a https URL where the domain ends with trycloudflare.com. This is your tunnel URL. You need to copy this URL as you will need it in the next step.

2022-11-11T19:57:55Z INF Requesting new quick Tunnel on trycloudflare.com...
2022-11-11T19:57:58Z INF +--------------------------------------------------------------------------------------------+
2022-11-11T19:57:58Z INF |  Your quick Tunnel has been created! Visit it at (it may take some time to be reachable):  |
2022-11-11T19:57:58Z INF |  https://randomly-generated-hostname.trycloudflare.com                                     |
2022-11-11T19:57:58Z INF +--------------------------------------------------------------------------------------------+
Below you would replace randomly-generated-hostname with what you have copied from the terminal. In a different terminal window, navigate to your app's root and with the URL from above you would call:

# Using yarn
yarn dev --tunnel-url https://randomly-generated-hostname.trycloudflare.com:3000
# or using npm
npm run dev --tunnel-url https://randomly-generated-hostname.trycloudflare.com:3000
# or using pnpm
pnpm dev --tunnel-url https://randomly-generated-hostname.trycloudflare.com:3000
Developer resources
Introduction to Shopify apps
App authentication
Shopify CLI
Shopify API Library documentation
Getting started with internationalizing your app
i18next
Configuration options
react-i18next
useTranslation hook
Trans component usage with components array
i18n-ally VS Code extension